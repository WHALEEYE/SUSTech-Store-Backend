<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tech.whaleeye.mapper.BackUserMapper">

    <resultMap id="BaseResultMap" type="tech.whaleeye.model.entity.BackUser">
        <!--@Table back_user-->
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="username" column="username" jdbcType="VARCHAR"/>
        <result property="password" column="password" jdbcType="VARCHAR"/>
        <result property="salt" column="salt" jdbcType="VARCHAR"/>
        <result property="roleId" column="role_id" jdbcType="INTEGER"/>
        <result property="banned" column="banned" jdbcType="BOOLEAN"/>
        <result property="createdTime" column="created_time" jdbcType="TIMESTAMP"/>
        <result property="updatedTime" column="updated_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <select id="queryById" resultMap="BaseResultMap">
        select id,
               username,
               password,
               salt,
               role_id,
               banned,
               created_time,
               updated_time
        from back_user
        where id = #{userId}
    </select>

    <select id="queryByUsername" resultMap="BaseResultMap">
        select id,
               username,
               password,
               salt,
               role_id,
               banned,
               created_time,
               updated_time
        from back_user
        where username = #{username}
    </select>

    <select id="listAllBackUsers" resultMap="BaseResultMap">
        select id,
               username,
               password,
               salt,
               role_id,
               banned,
               created_time,
               updated_time
        from back_user
        order by role_id desc, created_time desc
        limit #{pageSize} offset #{offset}
    </select>

    <select id="countBackUsers" resultType="Integer">
        select count(*)
        from back_user
        where not role_id = 3
    </select>

    <select id="deleteBackUser" resultType="Boolean">
        select delete_back_user(#{userId}, #{deleteUserId})
    </select>

    <insert id="addNewBackUser">
        insert into back_user (id, username, password, salt, role_id, banned, created_time, updated_time)
        values (default, #{username}, #{password}, #{salt}, #{roleId}, default, default, default)
    </insert>

    <update id="updatePassword">
        update back_user
        set password     = #{password},
            salt         = #{salt},
            updated_time = now()
        where id = #{userId}
    </update>

    <update id="banUser">
        update back_user
        set banned = true
        where id = #{userId}
          and not role_id = 3
          and not banned
    </update>

    <update id="unbanUser">
        update back_user
        set banned = false
        where id = #{userId}
          and not role_id = 3
          and banned
    </update>

</mapper>