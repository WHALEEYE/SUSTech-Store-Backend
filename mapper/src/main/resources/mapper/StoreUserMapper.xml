<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tech.whaleeye.mapper.StoreUserMapper">

    <resultMap id="BaseResultMap" type="tech.whaleeye.model.entity.StoreUser">
        <!--@Table store_user-->
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="phoneNumber" column="phone_number" jdbcType="VARCHAR"/>
        <result property="nickname" column="nickname" jdbcType="VARCHAR"/>
        <result property="cardNumber" column="card_number" jdbcType="VARCHAR"/>
        <result property="password" column="password" jdbcType="VARCHAR"/>
        <result property="salt" column="salt" jdbcType="VARCHAR"/>
        <result property="introduction" column="introduction" jdbcType="VARCHAR"/>
        <result property="avatarPath" column="avatar_path" jdbcType="VARCHAR"/>
        <result property="sex" column="sex" jdbcType="BOOLEAN"/>
        <result property="alipayAccount" column="alipay_account" jdbcType="VARCHAR"/>
        <result property="accountBalance" column="account_balance" jdbcType="OTHER"/>
        <result property="creditScore" column="credit_score" jdbcType="OTHER"/>
        <result property="totalSoldValue" column="total_sold_value" jdbcType="OTHER"/>
        <result property="secondHandNotification" column="second_hand_notification" jdbcType="BOOLEAN"/>
        <result property="agentServiceNotification" column="agent_service_notification" jdbcType="BOOLEAN"/>
        <result property="apiTradeNotification" column="api_trade_notification" jdbcType="BOOLEAN"/>
        <result property="banned" column="banned" jdbcType="BOOLEAN"/>
        <result property="createdTime" column="created_time" jdbcType="TIMESTAMP"/>
        <result property="updatedTime" column="updated_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap id="BriefUserMap" type="tech.whaleeye.model.vo.StoreUser.BriefUserVO">
        <!--@Table store_user-->
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="nickname" column="nickname" jdbcType="VARCHAR"/>
        <result property="avatarPath" column="avatar_path" jdbcType="VARCHAR"/>
    </resultMap>

    <select id="getUserById" resultMap="BaseResultMap">
        select id,
               phone_number,
               nickname,
               card_number,
               password,
               salt,
               introduction,
               avatar_path,
               sex,
               alipay_account,
               account_balance,
               credit_score,
               total_sold_value,
               second_hand_notification,
               agent_service_notification,
               api_trade_notification,
               banned,
               created_time,
               updated_time
        from store_user
        where id = #{userId}
    </select>

    <select id="getStoreUser" resultMap="BaseResultMap">
        select id,
        phone_number,
        nickname,
        card_number,
        password,
        salt,
        introduction,
        avatar_path,
        sex,
        alipay_account,
        account_balance,
        credit_score,
        total_sold_value,
        second_hand_notification,
        agent_service_notification,
        api_trade_notification,
        banned,
        created_time,
        updated_time
        from store_user
        <where>
            <if test="userId != null and userId != '' or userId == 0">
                and id = #{userId}
            </if>
            <if test="phoneNumber != null and phoneNumber != ''">
                and phone_number = #{phoneNumber}
            </if>
            <if test="cardNumber != null and cardNumber != ''">
                and card_number = #{cardNumber}
            </if>
        </where>
    </select>

    <select id="listFollowers" resultMap="BriefUserMap">
        select su.id,
               su.nickname,
               su.avatar_path
        from follow_relation fr
                 join store_user su on su.id = fr.follower_id
        where fr.followed_id = #{userId}
        order by fr.created_time desc
        limit #{pageSize} offset #{offset}
    </select>

    <select id="countFollowers" resultType="Integer">
        select count(*)
        from follow_relation
        where followed_id = #{userId}
    </select>

    <select id="listFollowings" resultMap="BriefUserMap">
        select su.id,
               su.nickname,
               su.avatar_path
        from follow_relation fr
                 join store_user su on su.id = fr.followed_id
        where fr.follower_id = #{userId}
        order by fr.created_time desc
        limit #{pageSize} offset #{offset}
    </select>

    <select id="countFollowings" resultType="Integer">
        select count(*)
        from follow_relation
        where follower_id = #{userId}
    </select>

    <select id="listCollectors" resultMap="BriefUserMap">
        select su.id,
               su.nickname,
               su.avatar_path
        from collect_relation cr
                 join store_user su on su.id = cr.collector_id
        where cr.good_id = #{goodId}
        order by cr.create_time desc
        limit #{pageSize} offset #{offset}
    </select>

    <select id="countCollectors" resultType="Integer">
        select count(*)
        from collect_relation
        where good_id = #{goodId}
    </select>

    <select id="listFriends" resultMap="BriefUserMap">
        select su.id, su.nickname, su.avatar_path
        from store_user su
                 join (select x1.friend_id,
                              x1.send_time,
                              row_number() over (partition by x1.friend_id order by x1.send_time desc) as rn
                       from (select receiver as friend_id, send_time
                             from chat_history
                             where sender = #{userId}
                             union all
                             select sender as friend_id, send_time
                             from chat_history
                             where receiver = #{userId}) x1) x2 on su.id = x2.friend_id
        where x2.rn = 1
        order by x2.send_time desc
    </select>

    <select id="isFollowing" resultType="Boolean">
        select count(*) > 0
        from follow_relation
        where follower_id = #{followerId}
          and followed_id = #{followedId}
    </select>

    <insert id="registerStoreUser" parameterType="String">
        insert into store_user (phone_number)
        values (#{phoneNumber})
    </insert>

    <insert id="followUser">
        insert into follow_relation (followed_id, follower_id, created_time)
        values (#{followedId}, #{followerId}, now())
    </insert>

    <delete id="unfollowUser">
        delete
        from follow_relation
        where follower_id = #{followerId}
          and followed_id = #{followedId}
    </delete>

    <update id="updatePassword">
        update store_user
        set password     = #{password},
            salt         = #{salt},
            updated_time = now()
        where id = #{userId}
    </update>

    <update id="setCardNumber">
        update store_user
        set card_number  = #{cardNumber},
            updated_time = now()
        where id = #{userId}
          and card_number is null
    </update>

    <update id="updateIntroduction">
        update store_user
        set introduction = #{introduction},
            updated_time = now()
        where id = #{userId}
    </update>

    <update id="updateNickname">
        update store_user
        set nickname     = #{nickname},
            updated_time = now()
        where id = #{userId}
    </update>

    <update id="updateAlipayAccount">
        update store_user
        set alipay_account = #{alipayAccount},
        updated_time = now()
        where id = #{userId}
        <if test="firstTime == true">
            and alipay_account is null
        </if>
    </update>

    <update id="updateSex">
        update store_user
        set sex          = #{sex},
            updated_time = now()
        where id = #{userId}
    </update>

    <update id="updateNotifications">
        update store_user
        set second_hand_notification   = #{secondHandNotification},
            agent_service_notification = #{agentServiceNotification},
            api_trade_notification     = #{apiTradeNotification},
            updated_time               = now()
        where id = #{userId}
    </update>

    <update id="updateAvatar">
        update store_user
        set avatar_path  = #{avatarPath},
            updated_time = now()
        where id = #{userId}
    </update>

    <delete id="deleteStoreUser">
        delete
        from store_user
        where id = #{userId}
    </delete>

    <!-- Used in background system -->

    <select id="listAll" resultMap="BaseResultMap">
        select id,
        phone_number,
        nickname,
        card_number,
        password,
        salt,
        introduction,
        avatar_path,
        sex,
        alipay_account,
        account_balance,
        credit_score,
        total_sold_value,
        second_hand_notification,
        agent_service_notification,
        api_trade_notification,
        banned,
        created_time,
        updated_time
        from store_user
        <where>
            <if test="searchNickname != null and searchNickname != ''">
                nickname like concat('%', #{searchNickname}, '%')
            </if>
            <if test="searchPhoneNumber != null and searchPhoneNumber != ''">
                and phone_number like concat('%', #{searchPhoneNumber}, '%')
            </if>
        </where>
        order by created_time desc limit #{pageSize} offset #{offset}
    </select>

    <select id="countAll" resultType="Integer">
        select count(*)
        from store_user
        <where>
            <if test="searchNickname != null and searchNickname != ''">
                nickname like concat('%', #{searchNickname}, '%')
            </if>
            <if test="searchPhoneNumber != null and searchPhoneNumber != ''">
                and phone_number like concat('%', #{searchPhoneNumber}, '%')
            </if>
        </where>
    </select>

    <update id="banUser">
        update store_user
        set banned = true
        where id = #{userId}
          and not banned
    </update>

    <update id="unbanUser">
        update store_user
        set banned = false
        where id = #{userId}
          and banned
    </update>

</mapper>