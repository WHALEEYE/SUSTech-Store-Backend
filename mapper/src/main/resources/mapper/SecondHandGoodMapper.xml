<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tech.whaleeye.mapper.SecondHandGoodMapper">

    <resultMap id="BaseResultMap" type="tech.whaleeye.model.entity.SecondHandGood">
        <!--@Table second_hand_good-->
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="typeId" column="type_id" jdbcType="INTEGER"/>
        <result property="title" column="title" jdbcType="VARCHAR"/>
        <result property="description" column="description" jdbcType="VARCHAR"/>
        <result property="price" column="price" jdbcType="OTHER"/>
        <result property="publisher" column="publisher" jdbcType="INTEGER"/>
        <result property="sold" column="sold" jdbcType="BOOLEAN"/>
        <result property="createdTime" column="created_time" jdbcType="TIMESTAMP"/>
        <result property="updatedTime" column="updated_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <select id="getGoodById" resultMap="BaseResultMap">
        select id,
               type_id,
               title,
               description,
               price,
               publisher,
               sold,
               created_time,
               updated_time
        from second_hand_good
        where id = #{goodId}
    </select>

    <select id="listAllGoods" resultMap="BaseResultMap">
        select id,
        type_id,
        title,
        description,
        price,
        publisher,
        sold,
        created_time,
        updated_time
        from second_hand_good
        where not sold
        <if test="typeId != null and typeId != '' or typeId == 0">
            and type_id = #{typeId}
        </if>
        <if test="searchKeyword != null and searchKeyword != ''">
            and (title like concat('%', #{searchKeyword}, '%')
            or description like concat('%', #{searchKeyword}, '%'))
        </if>
        order by sold, created_time desc
        limit #{pageSize} offset #{offset}
    </select>

    <select id="countAllGoods" resultType="Integer">
        select count(*)
        from second_hand_good
        where not sold
        <if test="typeId != null and typeId != '' or typeId == 0">
            and type_id = #{typeId}
        </if>
        <if test="searchKeyword != null and searchKeyword != ''">
            and (title like concat('%', #{searchKeyword}, '%')
            or description like concat('%', #{searchKeyword}, '%'))
        </if>
    </select>

    <select id="getGoodsByPublisher" resultMap="BaseResultMap">
        select id,
        type_id,
        title,
        description,
        price,
        publisher,
        sold,
        created_time,
        updated_time
        from second_hand_good
        where publisher = #{publisher}
        <choose>
            <when test="sold == true">and sold</when>
            <when test="sold == false">and not sold</when>
        </choose>
        <if test="searchKeyword != null and searchKeyword != ''">
            and (title like concat('%', #{searchKeyword}, '%')
            or description like concat('%', #{searchKeyword}, '%'))
        </if>
        order by sold, created_time desc
        limit #{pageSize} offset #{offset}
    </select>

    <select id="countGoodsByPublisher" resultType="Integer">
        select count(*)
        from second_hand_good
        where publisher = #{publisher}
        <choose>
            <when test="sold == true">and sold</when>
            <when test="sold == false">and not sold</when>
        </choose>
        <if test="searchKeyword != null and searchKeyword != ''">
            and (title like concat('%', #{searchKeyword}, '%')
            or description like concat('%', #{searchKeyword}, '%'))
        </if>
    </select>

    <select id="deleteSecondHandGood" resultType="Boolean">
        select delete_second_hand_good(#{goodId}, #{userId})
    </select>

    <select id="listCollectedGoods" resultMap="BaseResultMap">
        select shg.id,
               shg.type_id,
               shg.title,
               shg.description,
               shg.price,
               shg.publisher,
               shg.sold,
               shg.created_time,
               shg.updated_time
        from collect_relation cr
                 join second_hand_good shg on shg.id = cr.good_id
        where cr.collector_id = #{userId}
        order by cr.create_time desc
        limit #{pageSize} offset #{offset}
    </select>

    <select id="countCollectedGoods" resultType="Integer">
        select count(*)
        from collect_relation
        where collector_id = #{userId}
    </select>

    <insert id="insertSecondHandGood" useGeneratedKeys="true" keyProperty="id">
        insert into second_hand_good (id, type_id, title, description, price, publisher, sold, created_time,
                                      updated_time)
        values (default, #{good.typeId}, #{good.title}, #{good.description}, #{good.price}, #{publisher}, false,
                default, default)
    </insert>

    <insert id="collectGood">
        insert into collect_relation (good_id, collector_id, create_time)
        values (#{goodId}, #{userId}, default)
    </insert>

    <delete id="cancelCollectGood">
        delete
        from collect_relation
        where good_id = #{goodId}
          and collector_id = #{userId}
    </delete>

    <update id="updateGoodInfo" parameterType="tech.whaleeye.model.dto.SecondHandGoodDTO">
        update second_hand_good
        set type_id      = #{typeId},
            title        = #{title},
            description  = #{description},
            price        = #{price},
            updated_time = now()
        where not sold
          and id = #{id}
    </update>

    <!--used in background system-->

    <select id="listAllGoodsForBack" resultMap="BaseResultMap">
        select shg.id,
        shg.type_id,
        shg.title,
        shg.description,
        shg.price,
        shg.publisher,
        shg.sold,
        shg.created_time,
        shg.updated_time
        from second_hand_good shg join store_user su on shg.publisher = su.id
        where not sold
        <if test="searchNickname != null and searchNickname != ''">
            and su.nickname like concat('%', #{searchNickname}, '%')
        </if>
        <if test="searchPhoneNumber != null and searchPhoneNumber != ''">
            and su.phone_number like concat('%', #{searchPhoneNumber}, '%')
        </if>
        <if test="searchKeyword != null and searchKeyword != ''">
            and (title like concat('%', #{searchKeyword}, '%')
            or description like concat('%', #{searchKeyword}, '%'))
        </if>
        order by sold, created_time desc
        limit #{pageSize} offset #{offset}
    </select>

    <select id="countAllGoodsForBack" resultType="Integer">
        select count(*)
        from second_hand_good shg join store_user su on shg.publisher = su.id
        where not sold
        <if test="searchNickname != null and searchNickname != ''">
            and su.nickname like concat('%', #{searchNickname}, '%')
        </if>
        <if test="searchPhoneNumber != null and searchPhoneNumber != ''">
            and su.phone_number like concat('%', #{searchPhoneNumber}, '%')
        </if>
        <if test="searchKeyword != null and searchKeyword != ''">
            and (title like concat('%', #{searchKeyword}, '%')
            or description like concat('%', #{searchKeyword}, '%'))
        </if>
    </select>
</mapper>