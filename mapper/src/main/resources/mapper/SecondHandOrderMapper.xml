<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tech.whaleeye.mapper.SecondHandOrderMapper">

    <resultMap id="BaseResultMap" type="tech.whaleeye.model.entity.SecondHandOrder">
        <!--@Table second_hand_order-->
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="goodId" column="good_id" jdbcType="INTEGER"/>
        <result property="buyerId" column="buyer_id" jdbcType="INTEGER"/>
        <result property="orderStatus" column="order_status" jdbcType="INTEGER"/>
        <result property="actualPrice" column="actual_price" jdbcType="OTHER"/>
        <result property="tradeLocation" column="trade_location" jdbcType="VARCHAR"/>
        <result property="tradeLatitude" column="trade_latitude" jdbcType="VARCHAR"/>
        <result property="tradeLongitude" column="trade_longitude" jdbcType="VARCHAR"/>
        <result property="tradeTime" column="trade_time" jdbcType="TIMESTAMP"/>
        <result property="tradePassword" column="trade_password" jdbcType="VARCHAR"/>
        <result property="dealCode" column="deal_code" jdbcType="VARCHAR"/>
        <result property="refundCode" column="refund_code" jdbcType="VARCHAR"/>
        <result property="gradeBySeller" column="grade_by_seller" jdbcType="INTEGER"/>
        <result property="gradeByBuyer" column="grade_by_buyer" jdbcType="INTEGER"/>
        <result property="commentBySeller" column="comment_by_seller" jdbcType="VARCHAR"/>
        <result property="commentByBuyer" column="comment_by_buyer" jdbcType="VARCHAR"/>
        <result property="createdTime" column="created_time" jdbcType="TIMESTAMP"/>
        <result property="updatedTime" column="updated_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <select id="getUserType" resultType="Boolean">
        select case
                   when (select count(*) from second_hand_order where buyer_id = #{userId} and id = #{orderId}) > 0
                       then true
                   when (select count(*)
                         from second_hand_order sho
                                  join second_hand_good shg on sho.good_id = shg.id
                         where shg.publisher = #{userId}
                           and sho.id = #{orderId}) > 0 then false
                   end
    </select>

    <select id="getOrderById" resultMap="BaseResultMap">
        select id,
               good_id,
               buyer_id,
               order_status,
               actual_price,
               trade_location,
               trade_latitude,
               trade_longitude,
               trade_time,
               trade_password,
               deal_code,
               refund_code,
               grade_by_seller,
               grade_by_buyer,
               comment_by_seller,
               comment_by_buyer,
               created_time,
               updated_time
        from second_hand_order
        where id = #{orderId}
    </select>

    <select id="alreadyHaveOrder" resultType="Boolean">
        select exists(select null from second_hand_order where buyer_id = #{userId} and good_id = #{goodId})
    </select>

    <select id="getOrderByUserId" resultMap="BaseResultMap">
        select sho.id,
               sho.good_id,
               sho.buyer_id,
               sho.order_status,
               sho.actual_price,
               sho.trade_location,
               sho.trade_latitude,
               sho.trade_longitude,
               sho.trade_time,
               sho.trade_password,
               sho.deal_code,
               sho.refund_code,
               sho.grade_by_seller,
               sho.grade_by_buyer,
               sho.comment_by_seller,
               sho.comment_by_buyer,
               sho.created_time,
               sho.updated_time
        from second_hand_order sho
                 join second_hand_good shg on shg.id = sho.good_id
        where case #{userType} when true then sho.buyer_id = #{userId} when false then shg.publisher = #{userId} end
          and sho.order_status = #{orderStatus}
        limit #{pageSize} offset #{offset}
    </select>

    <select id="countOrderByUserId" resultType="Integer">
        select count(*)
        from second_hand_order sho
                 join second_hand_good shg on shg.id = sho.good_id
        where case #{userType} when true then sho.buyer_id = #{userId} when false then shg.publisher = #{userId} end
          and sho.order_status = #{orderStatus}
    </select>

    <select id="getOrderByGoodId" resultMap="BaseResultMap">
        select sho.id,
               sho.good_id,
               sho.buyer_id,
               sho.order_status,
               sho.actual_price,
               sho.trade_location,
               sho.trade_latitude,
               sho.trade_longitude,
               sho.trade_time,
               sho.trade_password,
               sho.deal_code,
               sho.refund_code,
               sho.grade_by_seller,
               sho.grade_by_buyer,
               sho.comment_by_seller,
               sho.comment_by_buyer,
               sho.created_time,
               sho.updated_time
        from second_hand_order sho
                 join second_hand_good shg on shg.id = sho.good_id
        where shg.publisher = #{publisher}
          and shg.id = #{goodId}
        limit #{pageSize} offset #{offset}
    </select>

    <select id="countOrderByGoodId" resultType="Integer">
        select count(*)
        from second_hand_order sho
                 join second_hand_good shg on shg.id = sho.good_id
        where shg.publisher = #{publisher}
          and shg.id = #{goodId}
    </select>

    <select id="buyerAck">
        select buyer_ack(#{orderId}, #{dealCode}, #{refundCode}, #{tradePassword})
    </select>

    <select id="orderConfirm">
        select order_confirm(#{orderId})
    </select>

    <select id="orderRefund">
        select order_refund(#{orderId})
    </select>

    <insert id="insertSecondHandOrder" parameterType="tech.whaleeye.model.entity.SecondHandOrder"
            useGeneratedKeys="true" keyProperty="id">
        insert into second_hand_order (id, good_id, buyer_id, order_status, actual_price, trade_location,
                                       trade_latitude, trade_longitude, trade_time, trade_password, deal_code,
                                       refund_code, grade_by_seller, grade_by_buyer, comment_by_seller,
                                       comment_by_buyer, created_time, updated_time)
        values (default, #{goodId}, #{buyerId}, default, #{actualPrice}, #{tradeLocation}, #{tradeLatitude},
                #{tradeLongitude}, #{tradeTime}, null, null, null, null, null, null, null, now(), now())
    </insert>

    <update id="cancelOrder">
        update second_hand_order
        set order_status = 5
        where id = #{orderId}
    </update>

    <update id="updateActualPrice">
        update second_hand_order
        set
        <if test="actualPrice != null and actualPrice != ''">
            actual_price = #{actualPrice},
        </if>
        order_status = 1
        where id = #{orderId}
    </update>

    <update id="updateCommentAndGrade">
        update second_hand_order set
        <choose>
            <when test="userType == true">grade_by_buyer = #{grade}, comment_by_buyer = #{comment}</when>
            <when test="userType == false">grade_by_seller = #{grade}, comment_by_seller = #{comment}</when>
        </choose>
        where id = #{orderId}
    </update>

    <!--used in background system-->

    <select id="listAllOrders" resultMap="BaseResultMap">
        select id,
        good_id,
        buyer_id,
        order_status,
        actual_price,
        trade_location,
        trade_latitude,
        trade_longitude,
        trade_time,
        trade_password,
        deal_code,
        refund_code,
        grade_by_seller,
        grade_by_buyer,
        comment_by_seller,
        comment_by_buyer,
        created_time,
        updated_time
        from second_hand_order
        <if test="orderId != null and orderId != '' or orderId == 0">
            where id = #{orderId}
        </if>
        order by order_status, updated_time desc
        limit #{pageSize} offset #{offset}
    </select>

    <select id="countAllOrders" resultType="Integer">
        select count(*)
        from second_hand_order
        <if test="orderId != null and orderId != '' or orderId == 0">
            where id = #{orderId}
        </if>
    </select>

</mapper>